import nmap
import socket
import tkinter as tk
from tkinter import filedialog

def scan_ports(host):
    nm = nmap.PortScanner()
    nm.scan(host, '1-1024')
    open_ports = []
    for port in nm[host]['tcp'].keys():
        if nm[host]['tcp'][port]['state'] == 'open':
            state = nm[host]['tcp'][port]['state']
            service = nm[host]['tcp'][port]['name']
            mac_address = nm[host]['addresses']['mac'] if 'mac' in nm[host]['addresses'] else None
            open_ports.append((port, state, service, mac_address))
    return open_ports

def retrieve_banner(host, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(2)
        s.connect((host, port))
        banner = s.recv(1024).decode().strip()
        print(f"Banner for port {port}: {banner}")
        s.close()
        return banner
    except (socket.timeout, socket.error) as e:
        print(f"Error retrieving banner from port {port}: {e}")
        return "Error: " + str(e)
    
def save_results(results):
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, 'w') as file:
            for result in results:
                file.write(f"Port: {result[0]}, State: {result[1]}, Service: {result[2]}, MAC Address: {result[3]}\n")

def main_scan():
    host = entry_host.get()
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, "---------scanning ports----------\n")
    open_ports = scan_ports(host)
    if open_ports:
        result_text.insert(tk.END, f"Open ports on {host}:\n")
        for port_info in open_ports:
            result_text.insert(tk.END, f"Port: {port_info[0]}, State: {port_info[1]}, Service: {port_info[2]}, MAC Address: {port_info[3]}\n")
        return open_ports
    else:
        result_text.insert(tk.END, f"No open ports found on {host}\n")
        return []

def main_banners():
    host = entry_host.get()
    port = int(entry_port.get())
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, "---------retrieving banners----------\n")
    banner = retrieve_banner(host, port)
    if banner:
        result_text.insert(tk.END, f"Banner for port {port}: {banner}\n")
    else:
        result_text.insert(tk.END, f"No banner information available for port {port}\n")

def save_results_to_file():
    results = main_scan()
    if results:
        save_results(results)

root = tk.Tk()
root.title("Vulnerability Scanner")
root.geometry("800x400")

frame_input = tk.Frame(root)
label_host = tk.Label(frame_input, text="Enter target IP address:")
label_host.pack(side='left')
entry_host = tk.Entry(frame_input)
entry_host.pack(side='left')
frame_input.pack(pady=10)

button_scan = tk.Button(root, text="Scan for open ports", command=main_scan)
button_scan.pack()

frame_port_input = tk.Frame(root)
label_port = tk.Label(frame_port_input, text="Enter port number:")
label_port.pack(side='left')
entry_port = tk.Entry(frame_port_input)
entry_port.pack(side='left')
frame_port_input.pack(pady=10)

button_banners = tk.Button(root, text="See banners", command=main_banners)
button_banners.pack()

button_save = tk.Button(root, text="Save Scan Results", command=save_results_to_file)
button_save.pack()

scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

result_text = tk.Text(root, height=15, width=100, yscrollcommand=scrollbar.set)
result_text.pack(side=tk.LEFT, fill=tk.BOTH)
scrollbar.config(command=result_text.yview)

root.mainloop()
